/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

uniform shader foreground;
uniform shader background;
uniform float2 uvOffsetFgd;
uniform float2 uvScaleFgd;
uniform float2 uvOffsetBgd;
uniform float2 uvScaleBgd;
uniform float2 timeForeground;
uniform float2 timeBackground;
uniform float screenAspectRatio;
uniform float2 screenSize;

#include "shaders/constants.agsl"
#include "shaders/utils.agsl"
#include "shaders/simplex_noise.agsl"

// TODO: explore a more performant way of generating the volumetric fog effect.
const int numOctaves = 2;

float fbm (vec3 st, vec2 time) {
    vec3 p = st;
    float a = 0.5;
    float result = 0.0;

    for (int i = 0; i < numOctaves; i++) {
        result += a * simplex3d(vec3(p.xy + time, p.z));
        p *= 2.0152;
        a *= 0.5;
    }

    return result;
}

vec3 normalBlendWithWhiteSrc(vec3 b, float o) {
    return b * (1. - o) + o;
}

vec3 normalBlend(vec3 b, vec3 f, float o) {
    return b * (1. - o) + f * o;
}

vec4 main(float2 fragCoord) {
    float2 uv = fragCoord / screenSize;
    uv.y /= screenAspectRatio;

    vec4 colorForeground = foreground.eval(fragCoord * uvScaleFgd + uvOffsetFgd);
    vec4 color = background.eval(fragCoord * uvScaleBgd + uvOffsetBgd);

    float frontFog = smoothstep(-0.616, 0.552, fbm(vec3(uv * 0.886, 123.1), timeForeground));
    float bgdFog = smoothstep(-0.744, 0.28, fbm(vec3(uv * 1.2, 231.), timeBackground));

    float dithering =  (1. - idGenerator(uv) * 0.161);

    color.rgb = normalBlendWithWhiteSrc(color.rgb, 0.8 * dithering * bgdFog);
    // Add the foreground. Any effect from here will be in front of the subject.
    color.rgb = normalBlend(color.rgb, colorForeground.rgb, colorForeground.a);
    // foreground fog.
    color.rgb = normalBlendWithWhiteSrc(color.rgb, 0.5 * frontFog);
    return color;
}
